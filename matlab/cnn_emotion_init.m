function net = cnn_emotion_init(varargin)
% CNN_emotion_LENET Initialize a CNN similar for emotion
opts.batchNormalization = false ;
opts.networkType = 'simplenn' ;
opts = vl_argparse(opts, varargin) ;

rng('shuffle');
rng(0) ;

f=1/100 ;
net.layers = {} ;
% net.layers{end+1} = struct('type', 'conv',...
%                            'weights', {{gpuArray(f*randn(3,3,1,64,'single')), gpuArray(zeros(1,64,'single'))}},...
%                            'stride', 1, 'pad', 1);
% net.layers{end+1} = struct('type', 'relu');
% net.layers{end+1} = struct('type', 'conv',...
%                            'weights', {{gpuArray(f*randn(3,3,64,64,'single')), gpuArray(zeros(1,64,'single'))}},...
%                            'stride', 1, 'pad', 1);
% net.layers{end+1} = struct('type', 'relu');
% net.layers{end+1} = struct('type', 'pool', ... %layer 5
%                            'method', 'max', ...
%                            'pool', [2 2], ...
%                            'stride', 2, ...
%                            'pad', 0) ;
% net.layers{end+1} = struct('type', 'conv',...
%                            'weights', {{gpuArray(f*randn(3,3,64,128,'single')), gpuArray(zeros(1,128,'single'))}},...
%                            'stride', 1, 'pad', 1);
% net.layers{end+1} = struct('type', 'relu');
% net.layers{end+1} = struct('type', 'conv',...
%                            'weights', {{gpuArray(f*randn(3,3,128,128,'single')), gpuArray(zeros(1,128,'single'))}},...
%                            'stride', 1, 'pad', 1);
% net.layers{end+1} = struct('type', 'relu');
% net.layers{end+1} = struct('type', 'pool', ... %10
%                            'method', 'max', ...
%                            'pool', [2 2], ...
%                            'stride', 2, ...
%                            'pad', 0) ;
% net.layers{end+1} = struct('type', 'conv',...
%                            'weights', {{gpuArray(f*randn(3,3,128,256,'single')), gpuArray(zeros(1,256,'single'))}},...
%                            'stride', 1, 'pad', 1);
% net.layers{end+1} = struct('type', 'relu');
% net.layers{end+1} = struct('type', 'conv',...
%                            'weights', {{gpuArray(f*randn(3,3,256,256,'single')), gpuArray(zeros(1,256,'single'))}},...
%                            'stride', 1, 'pad', 1);
% net.layers{end+1} = struct('type', 'relu');
% net.layers{end+1} = struct('type', 'conv',...
%                            'weights', {{gpuArray(f*randn(3,3,256,256,'single')), gpuArray(zeros(1,256,'single'))}},...
%                            'stride', 1, 'pad', 1);
% net.layers{end+1} = struct('type', 'relu');
% net.layers{end+1} = struct('type', 'pool', ... %17
%                            'method', 'max', ...
%                            'pool', [2 2], ...
%                            'stride', 2, ...
%                            'pad', 0) ;
% net.layers{end+1} = struct('type', 'conv',...
%                            'weights', {{gpuArray(f*randn(3,3,256,512,'single')), gpuArray(zeros(1,512,'single'))}},...
%                            'stride', 1, 'pad', 1);
% net.layers{end+1} = struct('type', 'relu');
% net.layers{end+1} = struct('type', 'conv',...
%                            'weights', {{gpuArray(f*randn(3,3,512,512,'single')), gpuArray(zeros(1,512,'single'))}},...
%                            'stride', 1, 'pad', 1);
% net.layers{end+1} = struct('type', 'relu');
% net.layers{end+1} = struct('type', 'conv',...
%                            'weights', {{gpuArray(f*randn(3,3,512,512,'single')), gpuArray(zeros(1,512,'single'))}},...
%                            'stride', 1, 'pad', 1);
% net.layers{end+1} = struct('type', 'relu');
% net.layers{end+1} = struct('type', 'pool', ... %24
%                            'method', 'max', ...
%                            'pool', [2 2], ...
%                            'stride', 2, ...
%                            'pad', 0) ;
% net.layers{end+1} = struct('type', 'conv',...
%                            'weights', {{gpuArray(f*randn(3,3,512,512,'single')), gpuArray(zeros(1,512,'single'))}},...
%                            'stride', 1, 'pad', 1);
% net.layers{end+1} = struct('type', 'relu');
% net.layers{end+1} = struct('type', 'conv',...
%                            'weights', {{gpuArray(f*randn(3,3,512,512,'single')), gpuArray(zeros(1,512,'single'))}},...
%                            'stride', 1, 'pad', 1);
% net.layers{end+1} = struct('type', 'relu');
% net.layers{end+1} = struct('type', 'conv',...
%                            'weights', {{gpuArray(f*randn(3,3,512,512,'single')), gpuArray(zeros(1,512,'single'))}},...
%                            'stride', 1, 'pad', 1);
% net.layers{end+1} = struct('type', 'relu');
% net.layers{end+1} = struct('type', 'pool', ... %31
%                            'method', 'max', ...
%                            'pool', [2 2], ...
%                            'stride', 2, ...
%                            'pad', 0) ;
% net.layers{end+1} = struct('type', 'conv',...
%                            'weights', {{gpuArray(f*randn(3,3,512,512,'single')), gpuArray(zeros(1,512,'single'))}},...
%                            'stride', 1, 'pad', 1);
% net.layers{end+1} = struct('type', 'relu');
% net.layers{end+1} = struct('type', 'conv',...
%                            'weights', {{gpuArray(f*randn(3,3,512,512,'single')), gpuArray(zeros(1,512,'single'))}},...
%                            'stride', 1, 'pad', 1);
% net.layers{end+1} = struct('type', 'relu');
% net.layers{end+1} = struct('type', 'conv',...
%                            'weights', {{gpuArray(f*randn(3,3,512,512,'single')), gpuArray(zeros(1,512,'single'))}},...
%                            'stride', 1, 'pad', 1);
% net.layers{end+1} = struct('type', 'relu');
% net.layers{end+1} = struct('type', 'pool', ... %38
%                            'method', 'max', ...
%                            'pool', [2 2], ...
%                            'stride', 2, ...
%                            'pad', 0) ;
% %FULLY CONNECTED STARTS HERE
% net.layers{end+1} = struct('type', 'conv',...
%                            'weights', {{gpuArray(f*randn(2,2,512,4096,'single')), gpuArray(zeros(1,4096,'single'))}},...
%                            'stride', 1, 'pad', 0);
% net.layers{end+1} = struct('type', 'relu');
% net.layers{end+1} = struct('type', 'conv',...
%                            'weights', {{gpuArray(f*randn(1,1,4096,4096,'single')), gpuArray(zeros(1,4096,'single'))}},...
%                            'stride', 1, 'pad', 0);
% net.layers{end+1} = struct('type', 'relu');
% net.layers{end+1} = struct('type', 'conv',...
%                            'weights', {{gpuArray(f*randn(1,1,4096,9,'single')), gpuArray(zeros(1,9,'single'))}},...
%                            'stride', 1, 'pad', 0);
% net.layers{end+1} = struct('type', 'softmaxloss') ;
net.layers{end+1} = struct('type', 'conv',...
                           'weights', {{gpuArray(f*randn(5,5,1,96,'single')), gpuArray(zeros(1,96,'single'))}},...
                           'stride', 2, 'pad', 0);
net.layers{end+1} = struct('type', 'relu');
net.layers{end+1} = struct('type', 'pool', ...
                           'method', 'max', ...
                           'pool', [3 3], ...
                           'stride', 3, ...
                           'pad', 0) ;
net.layers{end+1} = struct('type', 'dropout',...
                           'rate', 0.25);
net.layers{end+1} = struct('type', 'conv',...
                           'weights', {{gpuArray(f*randn(5,5,96,256,'single')), gpuArray(zeros(1,256,'single'))}},...
                           'stride', 1, 'pad', 0);
net.layers{end+1} = struct('type', 'relu');
net.layers{end+1} = struct('type', 'pool', ...
                           'method', 'max', ...
                           'pool', [2 2], ...
                           'stride', 2, ...
                           'pad', 0) ;
net.layers{end+1} = struct('type', 'dropout',...
                           'rate', 0.25);
net.layers{end+1} = struct('type', 'conv',...
                           'weights', {{gpuArray(f*randn(3,3,256,512,'single')), gpuArray(zeros(1,512,'single'))}},...
                           'stride', 1, 'pad', 0);
net.layers{end+1} = struct('type', 'relu');
net.layers{end+1} = struct('type', 'conv',...
                           'weights', {{gpuArray(f*randn(3,3,512,512,'single')), gpuArray(zeros(1,512,'single'))}},...
                           'stride', 1, 'pad', 0);
net.layers{end+1} = struct('type', 'relu');
net.layers{end+1} = struct('type', 'dropout',...
                           'rate', 0.5);
net.layers{end+1} = struct('type', 'conv',...
                           'weights', {{gpuArray(f*randn(3,3,512,512,'single')), gpuArray(zeros(1,512,'single'))}},...
                           'stride', 1, 'pad', 0);
net.layers{end+1} = struct('type', 'relu');
net.layers{end+1} = struct('type', 'pool', ...
                           'method', 'max', ...
                           'pool', [3 3], ...
                           'stride', 3, ...
                           'pad', 0) ;
net.layers{end+1} = struct('type', 'conv', ...
                           'weights', {{gpuArray(f*randn(1,1,512,512, 'single')), gpuArray(zeros(1,512,'single'))}}, ...
                           'stride', 1, ...
                           'pad', 0) ;
net.layers{end+1} = struct('type', 'relu');
net.layers{end+1} = struct('type', 'conv', ...
                           'weights', {{gpuArray(f*randn(1,1,512,2048, 'single')), gpuArray(zeros(1,2048,'single'))}}, ...
                           'stride', 1, ...
                           'pad', 0) ;
net.layers{end+1} = struct('type', 'relu');
net.layers{end+1} = struct('type', 'conv', ...
                           'weights', {{gpuArray(f*randn(1,1,2048,9, 'single')), gpuArray(zeros(1,9,'single'))}}, ...
                           'stride', 1, ...
                           'pad', 0) ;
net.layers{end+1} = struct('type', 'relu');
net.layers{end+1} = struct('type', 'softmaxloss') ;

% % optionally switch to batch normalization
% if opts.batchNormalization
%   net = insertBnorm(net, 1) ;
%   net = insertBnorm(net, 4) ;
%   net = insertBnorm(net, 7) ;
% end

% Meta parameters
net.meta.inputSize = [160 160 1] ;
net.meta.trainOpts.learningRate = 0.001 ;
net.meta.trainOpts.numEpochs = 10000 ;
net.meta.trainOpts.batchSize = 140 ;

% Fill in defaul values
net = vl_simplenn_tidy(net) ;

% Switch to DagNN if requested
switch lower(opts.networkType)
  case 'simplenn'
    % done
  case 'dagnn'
    net = dagnn.DagNN.fromSimpleNN(net, 'canonicalNames', true) ;
    net.addLayer('error', dagnn.Loss('loss', 'classerror'), ...
             {'prediction','label'}, 'error') ;
  otherwise
    assert(false) ;
end

% --------------------------------------------------------------------
function net = insertBnorm(net, l)
% --------------------------------------------------------------------
assert(isfield(net.layers{l}, 'weights'));
ndim = size(net.layers{l}.weights{1}, 4);
layer = struct('type', 'bnorm', ...
               'weights', {{ones(ndim, 1, 'single'), zeros(ndim, 1, 'single')}}, ...
               'learningRate', [1 1 0.05], ...
               'weightDecay', [0 0]) ;
net.layers{l}.biases = [] ;
net.layers = horzcat(net.layers(1:l), layer, net.layers(l+1:end)) ;
